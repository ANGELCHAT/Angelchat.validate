// Generated by CoffeeScript 1.9.2
var Parser, _;

_ = require('underscore');

Parser = {
  parsers: {},
  addParser: function(name, rule) {
    return this.parsers[name] = rule;
  },
  checkRule: function(name) {
    var rule;
    rule = this.parsers[name];
    if (typeof name === 'string' && rule && typeof rule.parse === 'function') {
      return true;
    }
    throw new Error(name + ' is not a complete rule. A complete rule must contain `parse` function.');
  },
  parse: function(obj, ruleset) {
    var key, rule, value;
    if (!obj) {
      return obj;
    }
    for (key in ruleset) {
      rule = ruleset[key];
      if ((value = obj[key]) != null) {
        obj[key] = this.parsers[rule].parse(value);
      }
    }
    return obj;
  }
};

Parser.addParser('binary', {
  parse: function(value) {
    if (/^(true|[1-9]+[0-9]*)$/i.test(value)) {
      return 1;
    } else {
      return 0;
    }
  }
});

Parser.addParser('lowercase', {
  parse: function(value) {
    return value.toString().toLowerCase();
  }
});

Parser.addParser('uppercase', {
  parse: function(value) {
    return value.toString().toUpperCase();
  }
});

Parser.addParser('integer', {
  parse: function(value) {
    return parseInt(value, 10);
  }
});

Parser.addParser('array', {
  parse: function(value) {
    if (value instanceof Array) {
      return value;
    }
    if (typeof value === "string") {
      return value.split(",");
    } else {
      return [value];
    }
  }
});

module.exports = Parser;
